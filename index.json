{
  "README.html": {
    "href": "README.html",
    "title": "FFME: WPF MediaElement Alternative | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "FFME: WPF MediaElement Alternative ‚≠ê Please star this project if you find it useful! Current Status: (2017-09-12) - 2.0, codenamed Michelob is now in beta 1 (see the Releases ) FFmpeg Version: 3.4.0 (32-bit) For a history of commits see the repo: https://github.com/unosquare/ffplaydotnet Features Overview FFME is a close (and I'd like to think better) drop-in replacement for Microsoft's WPF MediaElement Control . While the standard MediaElement uses DirectX (DirectShow) for media playback, FFME uses FFmpeg to read and decode audio and video. This means that for those of you who want to support stuff like HLS playback, or just don't want to go through the hassle of installing codecs on client machines, using FFME might just be the answer. FFME provides multiple improvements over the standard MediaElement such as: Fast media seeking and frame-by-frame seeking Properties such as Position, NaturalDuration, SpeedRatio, and Volume are all Dependency Properties! Additional and extended media events. Extracting video, audio and subtitle frames is very easy. Ability to easily apply video filtergraphs. Ability to extract media metadata and tech specs of a media stream (title, album, bitrate, codecs, FPS, etc). Ability to apply volume, balance and speed ratio to media playback. ... all in a single MediaElement control Known Limitations Your help is welcome! I still have some items I need to address. See the issues section. Working on Hardware acceleration D3D 9 and D3D 11 There currently is no support for opening capture devices such as webcams or TV cards. While this is not too hard to do, it is not (yet) implemented in this library. See issue #48 Compiling, Running and Testing Please note that I am unable to distribute FFmpeg's binaries because I don't know if I am allowed to do so. Follow the instructions below to compile, run and test FFME. I will look into releasing a NuGet package. See issue #1 Clone this repository. Download the FFmpeg win32-shared binaries from Zeranoe FFmpeg Builds . Extract the contents of the zip file you just downloaded and go to the bin folder that got extracted. You should see 3 exe files and 8 dll files. Select and copy all of them. Now paste all 11 files from the prior step onto a well-known folder. Take note of the full path. (I used c:\\ffmpeg) Open the solution and set the Unosquare.FFME.Sample project as the startup project. You can do this by right clicking on the project and selecting Set as startup project Under the Unosquare.FFME.Sample project, locate the line public string FFmpegPath { get; set; } = @\"C:\\ffmpeg\\\"; and replace the path so that it points to the folder where you extracted your FFmpeg binaries (dll files). Click on Start to run the project. You should see a sample media player. Click on the Open icon located at the bottom right and enter a URL or path to a media file. The file or URL should play immediately, and all the properties should display to the right of the media display by clicking on the Info icon. You can use the resulting compiled assembly in your project without further dependencies as FFME is entirely self-contained. The locations of the compiled FFME assembly, depending on your build configuration are either ...\\ffmediaelement\\Unosquare.FFME\\bin\\Debug\\Unosquare.FFME.dll or ...\\ffmediaelement\\Unosquare.FFME\\bin\\Release\\Unosquare.FFME.dll macOS player (in preview) Compile FFmpeg for mac (instructions can be found on FFmpeg.AutoGen ) and copy the following libraries from /opt/local/lib 's to /Users/{USER}/ffmpeg ( ~/ffmpeg ): avcodec.57.dylib avdevice.57.dylib avfilter.6.dylib avformat.57.dylib avutil.55.dylib swresample.2.dylib swscale.4.dylib Note: when building FFmpeg locally, compiled libraries are named differently than in the list above. E.g. avcodec.57.dylib is actually named libavcodec.57.89.100.dylib . To properly load libraries, copy and rename each library to match the format in the list above. In the sample macOS application, FFmpeg folder is configured to use ~/ffmpeg in the following line of code: Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), \"ffmpeg\"); Note that it can be customized to point to any other folder. When distributing the player and the associated libraries with your application, dll's should be added to the project as BundleResource . Also, each library should be copied to the output directory on build. Afterwards, change the above configuration to use Environment.CurrentDirectory to search for FFmpeg libraries. Using FFME in your Project Remember: The Unosquare.FFME.Sample provides a reference implementation of usage Create a new WPF application Add a reference to Unosquare.FFME.dll In your MainForm.xaml , add the namespace: xmlns:ffme=\"clr-namespace:Unosquare.FFME;assembly=Unosquare.FFME\" Finally, create an instance of the FFME control in your MainForm.xaml as follows: <ffme:MediaElement x:Name=\"MediaEl\" Background=\"Gray\" LoadedBehavior=\"Play\" UnloadedBehavior=\"Manual\" /> Thanks In no particular order To the FFmpeg team for making the Swiss Army Knife of media. I encourage you to donate to them. To Kyle Schwarz for creating and making Zeranoe FFmpeg builds available to everyone . To the NAudio team for making the best audio library out there for .NET -- one day I will contribute some improvements I have noticed they need. To Ruslan Balanukhin for his FFmpeg interop bindings generator tool: FFmpeg.AutoGen . To Martin Bohme for his tutorial on creating a video player with FFmpeg. To Barry Mieny for his beautiful FFmpeg logo Similar Projects Meta Vlc Microsoft FFmpeg Interop WPF-MediaKit LibVLC.NET Microsoft Player Framework License Please refer to the LICENSE file for more information."
  },
  "api/Unosquare.FFME.MediaElement.html": {
    "href": "api/Unosquare.FFME.MediaElement.html",
    "title": "Class MediaElement | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class MediaElement Represents a control that contains audio and/or video. In contrast with System.Windows.Controls.MediaElement, this version uses the FFmpeg library to perform reading and decoding of media streams. Inheritance System.Object MediaElement Implements System.IDisposable INotifyPropertyChanged IUriContext Namespace : Unosquare.FFME Syntax public sealed class MediaElement : UserControl, IDisposable, INotifyPropertyChanged, IUriContext Constructors MediaElement() Initializes a new instance of the MediaElement class. Declaration public MediaElement() Fields BalanceProperty The DependencyProperty for the MediaElement.Balance property. Declaration public static readonly DependencyProperty BalanceProperty Field Value Type Description DependencyProperty BufferingEndedEvent BufferingEnded is a routed event Declaration public static readonly RoutedEvent BufferingEndedEvent Field Value Type Description RoutedEvent BufferingStartedEvent BufferingStarted is a routed event Declaration public static readonly RoutedEvent BufferingStartedEvent Field Value Type Description RoutedEvent IsMutedProperty The DependencyProperty for the MediaElement.IsMuted property. Declaration public static readonly DependencyProperty IsMutedProperty Field Value Type Description DependencyProperty LoadedBehaviorProperty The DependencyProperty for the MediaElement.LoadedBehavior property. Declaration public static readonly DependencyProperty LoadedBehaviorProperty Field Value Type Description DependencyProperty MediaEndedEvent MediaEnded is a routed event Declaration public static readonly RoutedEvent MediaEndedEvent Field Value Type Description RoutedEvent MediaFailedEvent MediaFailedEvent is a routed event. Declaration public static readonly RoutedEvent MediaFailedEvent Field Value Type Description RoutedEvent MediaOpenedEvent MediaOpened is a routed event. Declaration public static readonly RoutedEvent MediaOpenedEvent Field Value Type Description RoutedEvent MediaOpeningEvent MediaOpeningEvent is a routed event. Declaration public static readonly RoutedEvent MediaOpeningEvent Field Value Type Description RoutedEvent PositionProperty The DependencyProperty for the MediaElement.Position property. Declaration public static readonly DependencyProperty PositionProperty Field Value Type Description DependencyProperty ScrubbingEnabledProperty The DependencyProperty for the MediaElement.ScrubbingEnabled property. Declaration public static readonly DependencyProperty ScrubbingEnabledProperty Field Value Type Description DependencyProperty SeekingEndedEvent SeekingEnded is a routed event Declaration public static readonly RoutedEvent SeekingEndedEvent Field Value Type Description RoutedEvent SeekingStartedEvent SeekingStarted is a routed event Declaration public static readonly RoutedEvent SeekingStartedEvent Field Value Type Description RoutedEvent SourceProperty DependencyProperty for FFmpegMediaElement Source property. Declaration public static readonly DependencyProperty SourceProperty Field Value Type Description DependencyProperty SpeedRatioProperty The DependencyProperty for the MediaElement.SpeedRatio property. Declaration public static readonly DependencyProperty SpeedRatioProperty Field Value Type Description DependencyProperty StretchDirectionProperty DependencyProperty for StretchDirection property. Declaration public static readonly DependencyProperty StretchDirectionProperty Field Value Type Description DependencyProperty StretchProperty DependencyProperty for Stretch property. Declaration public static readonly DependencyProperty StretchProperty Field Value Type Description DependencyProperty UnloadedBehaviorProperty The DependencyProperty for the MediaElement.UnloadedBehavior property. TODO: Currently this property has no effect. Needs implementation. Declaration public static readonly DependencyProperty UnloadedBehaviorProperty Field Value Type Description DependencyProperty VolumeProperty The DependencyProperty for the MediaElement.Volume property. Declaration public static readonly DependencyProperty VolumeProperty Field Value Type Description DependencyProperty Properties AudioBitrate Gets the audio bitrate. Only valid after the MediaOpened event has fired. Declaration public int AudioBitrate { get; } Property Value Type Description System.Int32 AudioBitsPerSample Gets the audio bits per sample. Only valid after the MediaOpened event has fired. Declaration public int AudioBitsPerSample { get; } Property Value Type Description System.Int32 AudioChannels Gets the audio channels count. Only valid after the MediaOpened event has fired. Declaration public int AudioChannels { get; } Property Value Type Description System.Int32 AudioCodec Gets the audio codec. Only valid after the MediaOpened event has fired. Declaration public string AudioCodec { get; } Property Value Type Description System.String AudioSampleRate Gets the audio sample rate. Only valid after the MediaOpened event has fired. Declaration public int AudioSampleRate { get; } Property Value Type Description System.Int32 Balance Gets/Sets the Balance property on the MediaElement. Declaration public double Balance { get; set; } Property Value Type Description System.Double BufferCacheLength The wait packet buffer length. It is adjusted to 1 second if bitrate information is available. Otherwise, it's simply 512KB Declaration public int BufferCacheLength { get; } Property Value Type Description System.Int32 BufferingProgress Gets a value that indicates the percentage of buffering progress made. Range is from 0 to 1 Declaration public double BufferingProgress { get; } Property Value Type Description System.Double CanPause Returns whether the currently loaded media can be paused. This is only valid after the MediaOpened event has fired. Note that this property is computed based on wether the stream is detected to be a live stream. Declaration public bool CanPause { get; } Property Value Type Description System.Boolean DownloadCacheLength Gets the maximum packet buffer length, according to the bitrate (if available). If it's a realtime stream it will return 30 times the buffer cache length. Otherwise, it will return 4 times of the buffer cache length. Declaration public int DownloadCacheLength { get; } Property Value Type Description System.Int32 DownloadProgress Gets a value that indicates the percentage of download progress made. Range is from 0 to 1 Declaration public double DownloadProgress { get; } Property Value Type Description System.Double FFmpegDirectory Gets or sets the FFmpeg path from which to load the FFmpeg binaries. You must set this path before setting the Source property for the first time on any instance of this control. Settng this property when FFmpeg binaries have been registered will throw an exception. Declaration public static string FFmpegDirectory { get; set; } Property Value Type Description System.String FrameStepDuration Gets the duration of a single frame step. If there is a video component with a framerate, this propery returns the length of a frame. If there is no video component it simply returns a tenth of a second. Declaration public TimeSpan FrameStepDuration { get; } Property Value Type Description System.TimeSpan HasAudio Returns whether the given media has audio. Only valid after the MediaOpened event has fired. Declaration public bool HasAudio { get; } Property Value Type Description System.Boolean HasMediaEnded Gets a value indicating whether the media has reached its end. Declaration public bool HasMediaEnded { get; } Property Value Type Description System.Boolean HasVideo Returns whether the given media has video. Only valid after the MediaOpened event has fired. Declaration public bool HasVideo { get; } Property Value Type Description System.Boolean HorizontalAlignment Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control. Declaration public HorizontalAlignment HorizontalAlignment { get; set; } Property Value Type Description HorizontalAlignment IsBuffering Get a value indicating whether the media is buffering. Declaration public bool IsBuffering { get; } Property Value Type Description System.Boolean IsLiveStream Returns whether the currently loaded media is live or realtime This is only valid after the MediaOpened event has fired. Declaration public bool IsLiveStream { get; } Property Value Type Description System.Boolean IsMuted Gets/Sets the IsMuted property on the MediaElement. Declaration public bool IsMuted { get; set; } Property Value Type Description System.Boolean IsOpen Gets a value indicating whether this media element currently has an open media url. Declaration public bool IsOpen { get; } Property Value Type Description System.Boolean IsOpening Gets a value indicating whether the media is in the process of opening. Declaration public bool IsOpening { get; } Property Value Type Description System.Boolean IsPlaying Gets a value indicating whether the media is playing. Declaration public bool IsPlaying { get; } Property Value Type Description System.Boolean IsSeekable Gets a value indicating whether the currently loaded media can be seeked. Declaration public bool IsSeekable { get; } Property Value Type Description System.Boolean IsSeeking Gets a value indicating whether the media seeking is in progress. Declaration public bool IsSeeking { get; } Property Value Type Description System.Boolean LoadedBehavior Specifies the behavior that the media element should have when it is loaded. The default behavior is that it is under manual control (i.e. the caller should call methods such as Play in order to play the media). If a source is set, then the default behavior changes to to be playing the media. If a source is set and a loaded behavior is also set, then the loaded behavior takes control. Declaration public MediaState LoadedBehavior { get; set; } Property Value Type Description MediaState MediaFormat Gets the media format. Returns null when media has not been loaded. Declaration public string MediaFormat { get; } Property Value Type Description System.String MediaState Gets the current playback state. Declaration public MediaState MediaState { get; } Property Value Type Description MediaState Metadata Provides key-value pairs of the metadata contained in the media. Returns null when media has not been loaded. Declaration public ICollectionView Metadata { get; } Property Value Type Description ICollectionView NaturalDuration Gets the Media's natural duration Only valid after the MediaOpened event has fired. Declaration public Duration NaturalDuration { get; } Property Value Type Description Duration NaturalVideoHeight Returns the natural height of the media in the video. Only valid after the MediaOpened event has fired. Declaration public int NaturalVideoHeight { get; } Property Value Type Description System.Int32 NaturalVideoWidth Returns the natural width of the media in the video. Only valid after the MediaOpened event has fired. Declaration public int NaturalVideoWidth { get; } Property Value Type Description System.Int32 Position Gets/Sets the Position property on the MediaElement. Declaration public TimeSpan Position { get; set; } Property Value Type Description System.TimeSpan ScrubbingEnabled Gets or sets a value that indicates whether the MediaElement will update frames for seek operations while paused. This is a dependency property. Declaration public bool ScrubbingEnabled { get; set; } Property Value Type Description System.Boolean Source Gets/Sets the Source on this MediaElement. The Source property is the Uri of the media to be played. Declaration public Uri Source { get; set; } Property Value Type Description Uri SpeedRatio Gets/Sets the SpeedRatio property on the MediaElement. Declaration public double SpeedRatio { get; set; } Property Value Type Description System.Double Stretch Gets/Sets the Stretch on this MediaElement. The Stretch property determines how large the MediaElement will be drawn. Declaration public Stretch Stretch { get; set; } Property Value Type Description Stretch StretchDirection Gets/Sets the stretch direction of the Viewbox, which determines the restrictions on scaling that are applied to the content inside the Viewbox. For instance, this property can be used to prevent the content from being smaller than its native size or larger than its native size. Declaration public StretchDirection StretchDirection { get; set; } Property Value Type Description StretchDirection UnloadedBehavior Specifies how the underlying media should behave when it has ended. The default behavior is to Close the media. Declaration public MediaState UnloadedBehavior { get; set; } Property Value Type Description MediaState VideoBitrate Gets the video bitrate. Only valid after the MediaOpened event has fired. Declaration public int VideoBitrate { get; } Property Value Type Description System.Int32 VideoCodec Gets the video codec. Only valid after the MediaOpened event has fired. Declaration public string VideoCodec { get; } Property Value Type Description System.String VideoFrameLength Gets the duration in seconds of the video frame. Only valid after the MediaOpened event has fired. Declaration public double VideoFrameLength { get; } Property Value Type Description System.Double VideoFrameRate Gets the video frame rate. Only valid after the MediaOpened event has fired. Declaration public double VideoFrameRate { get; } Property Value Type Description System.Double VideoHardwareDecoder Gets the name of the video hardware decoder in use. Enabling hardware acceleration does not guarantee decoding will be performed in hardware. When hardware decoding of frames is in use this will return the name of the HW accelerator. Otherwise it will return an empty string. Declaration public string VideoHardwareDecoder { get; } Property Value Type Description System.String VideoSmtpeTimecode Returns the current video SMTPE timecode if available. If not available, this property returns an empty string. Declaration public string VideoSmtpeTimecode { get; } Property Value Type Description System.String Volume Gets/Sets the Volume property on the MediaElement. Note: Valid values are from 0 to 1 Declaration public double Volume { get; set; } Property Value Type Description System.Double Methods Close() Closes the currently loaded media. Declaration public void Close() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Pause() Pauses playback of the currently loaded media. Declaration public void Pause() Play() Begins or resumes playback of the currently loaded media. Declaration public void Play() Stop() Pauses and rewinds the currently loaded media. Declaration public void Stop() Events BufferingEnded Occurs when buffering of packets was Ended Declaration public event RoutedEventHandler BufferingEnded Event Type Type Description RoutedEventHandler BufferingStarted Occurs when buffering of packets was started Declaration public event RoutedEventHandler BufferingStarted Event Type Type Description RoutedEventHandler FFmpegMessageLogged Occurs when a logging message from the FFmpeg library has been received. This is shared across all instances of Media Elements Declaration public static event EventHandler<MediaLogMessagEventArgs> FFmpegMessageLogged Event Type Type Description System.EventHandler < MediaLogMessagEventArgs > MediaEnded Raised when the corresponding media ends. Declaration public event RoutedEventHandler MediaEnded Event Type Type Description RoutedEventHandler MediaFailed Raised when the media fails to load or a fatal error has occurred which prevents playback. Declaration public event EventHandler<ExceptionRoutedEventArgs> MediaFailed Event Type Type Description System.EventHandler < ExceptionRoutedEventArgs > MediaOpened Raised when the media is opened Declaration public event RoutedEventHandler MediaOpened Event Type Type Description RoutedEventHandler MediaOpening Raised before the input stream of the media is opened. Use this method to modify the input options. Declaration public event EventHandler<MediaOpeningRoutedEventArgs> MediaOpening Event Type Type Description System.EventHandler < MediaOpeningRoutedEventArgs > MessageLogged Occurs when a logging message has been logged. This does not include FFmpeg messages. Declaration public event EventHandler<MediaLogMessagEventArgs> MessageLogged Event Type Type Description System.EventHandler < MediaLogMessagEventArgs > PropertyChanged Multicast event for property change notifications. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description PropertyChangedEventHandler SeekingEnded Occurs when Seeking of packets was Ended Declaration public event RoutedEventHandler SeekingEnded Event Type Type Description RoutedEventHandler SeekingStarted Occurs when Seeking of packets was started Declaration public event RoutedEventHandler SeekingStarted Event Type Type Description RoutedEventHandler Implements System.IDisposable INotifyPropertyChanged IUriContext See Also System.IDisposable"
  },
  "api/Unosquare.FFME.html": {
    "href": "api/Unosquare.FFME.html",
    "title": "Namespace Unosquare.FFME | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Namespace Unosquare.FFME Classes MediaElement Represents a control that contains audio and/or video. In contrast with System.Windows.Controls.MediaElement, this version uses the FFmpeg library to perform reading and decoding of media streams. MediaOpeningRoutedEventArgs Represents the event arguments of the MediaOpening routed event."
  },
  "api/Unosquare.FFME.MediaOpeningRoutedEventArgs.html": {
    "href": "api/Unosquare.FFME.MediaOpeningRoutedEventArgs.html",
    "title": "Class MediaOpeningRoutedEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class MediaOpeningRoutedEventArgs Represents the event arguments of the MediaOpening routed event. Inheritance System.Object MediaOpeningRoutedEventArgs Namespace : Unosquare.FFME Syntax public class MediaOpeningRoutedEventArgs : RoutedEventArgs Constructors MediaOpeningRoutedEventArgs(RoutedEvent, Object, MediaOptions, MediaInfo) Initializes a new instance of the MediaOpeningRoutedEventArgs class. Declaration public MediaOpeningRoutedEventArgs(RoutedEvent routedEvent, object source, MediaOptions options, MediaInfo info) Parameters Type Name Description RoutedEvent routedEvent The routed event. System.Object source The source. MediaOptions options The options. MediaInfo info The input information. Properties Info Provides internal details of the media, inclusing its component streams. Typically, options are set based on what this information contains. Declaration public MediaInfo Info { get; } Property Value Type Description MediaInfo Options Set or change the options before the media is opened. Declaration public MediaOptions Options { get; } Property Value Type Description MediaOptions"
  }
}