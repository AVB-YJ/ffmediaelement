{
  "api/Unosquare.FFME.Events.MediaLogMessageEventArgs.html": {
    "href": "api/Unosquare.FFME.Events.MediaLogMessageEventArgs.html",
    "title": "Class MediaLogMessageEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class MediaLogMessageEventArgs Contains the Message Logged Event Arguments Inheritance System.Object System.EventArgs MediaLogMessageEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.FFME.Events Syntax public class MediaLogMessageEventArgs : EventArgs Constructors MediaLogMessageEventArgs(MediaLogMessage) Initializes a new instance of the MediaLogMessageEventArgs class. Declaration public MediaLogMessageEventArgs(MediaLogMessage message) Parameters Type Name Description MediaLogMessage message The message. Properties Message Gets the contents of the message. Declaration public string Message { get; } Property Value Type Description System.String MessageType Gets the type of the message. Declaration public MediaLogMessageType MessageType { get; } Property Value Type Description MediaLogMessageType Source Gets the intance of the MediaElement that generated this message. When null, it means FFmpeg generated this message. Declaration public MediaEngine Source { get; } Property Value Type Description MediaEngine TimestampUtc Gets the timestamp. Declaration public DateTime TimestampUtc { get; } Property Value Type Description System.DateTime See Also System.EventArgs <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.html": {
    "href": "api/Unosquare.FFME.html",
    "title": "Namespace Unosquare.FFME | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Namespace Unosquare.FFME Classes MediaElement Represents a control that contains audio and/or video. In contrast with System.Windows.Controls.MediaElement, this version uses the FFmpeg library to perform reading and decoding of media streams. Subtitles Defines attached properties for subtitle rendering <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Subtitles.html": {
    "href": "api/Unosquare.FFME.Subtitles.html",
    "title": "Class Subtitles | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class Subtitles Defines attached properties for subtitle rendering Inheritance System.Object Subtitles Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.FFME Syntax public sealed class Subtitles Fields EffectProperty The text foreground effect dependency property Declaration public static readonly DependencyProperty EffectProperty Field Value Type Description DependencyProperty FontFamilyProperty The font family property Declaration public static readonly DependencyProperty FontFamilyProperty Field Value Type Description DependencyProperty FontSizeProperty The font size property Declaration public static readonly DependencyProperty FontSizeProperty Field Value Type Description DependencyProperty FontWeightProperty The font weight property Declaration public static readonly DependencyProperty FontWeightProperty Field Value Type Description DependencyProperty ForegroundProperty The foreground text property Declaration public static readonly DependencyProperty ForegroundProperty Field Value Type Description DependencyProperty OutlineBrushProperty The text outline brush dependency property Declaration public static readonly DependencyProperty OutlineBrushProperty Field Value Type Description DependencyProperty OutlineWidthProperty The text outline width dependency property Declaration public static readonly DependencyProperty OutlineWidthProperty Field Value Type Description DependencyProperty TextProperty The foreground text property Declaration public static readonly DependencyProperty TextProperty Field Value Type Description DependencyProperty Methods GetEffect(MediaElement) Gets the effect. Declaration public static Effect GetEffect(MediaElement obj) Parameters Type Name Description MediaElement obj The object. Returns Type Description Effect The value GetFontFamily(MediaElement) Gets the font family. Declaration public static FontFamily GetFontFamily(MediaElement obj) Parameters Type Name Description MediaElement obj The object. Returns Type Description FontFamily The value GetFontSize(MediaElement) Gets the size of the font. Declaration public static double GetFontSize(MediaElement obj) Parameters Type Name Description MediaElement obj The object. Returns Type Description System.Double The value GetFontWeight(MediaElement) Gets the font weight. Declaration public static FontWeight GetFontWeight(MediaElement obj) Parameters Type Name Description MediaElement obj The object. Returns Type Description FontWeight The value GetForeground(MediaElement) Gets the text foreground. Declaration public static Brush GetForeground(MediaElement obj) Parameters Type Name Description MediaElement obj The object. Returns Type Description Brush The value GetOutlineBrush(MediaElement) Gets the outline brush. Declaration public static Brush GetOutlineBrush(MediaElement obj) Parameters Type Name Description MediaElement obj The object. Returns Type Description Brush The value. GetOutlineWidth(MediaElement) Gets the width of the outline. Declaration public static Thickness GetOutlineWidth(MediaElement obj) Parameters Type Name Description MediaElement obj The object. Returns Type Description Thickness The value. GetText(MediaElement) Gets the text. Declaration public static string GetText(MediaElement obj) Parameters Type Name Description MediaElement obj The object. Returns Type Description System.String The value SetEffect(MediaElement, Effect) Sets the effect. Declaration public static void SetEffect(MediaElement obj, Effect value) Parameters Type Name Description MediaElement obj The object. Effect value The value. SetFontFamily(MediaElement, FontFamily) Sets the font family. Declaration public static void SetFontFamily(MediaElement obj, FontFamily value) Parameters Type Name Description MediaElement obj The object. FontFamily value The value. SetFontSize(MediaElement, Double) Sets the size of the font. Declaration public static void SetFontSize(MediaElement obj, double value) Parameters Type Name Description MediaElement obj The object. System.Double value The value. SetFontWeight(MediaElement, FontWeight) Sets the font weight. Declaration public static void SetFontWeight(MediaElement obj, FontWeight value) Parameters Type Name Description MediaElement obj The object. FontWeight value The value. SetForeground(MediaElement, Brush) Sets the text foreground. Declaration public static void SetForeground(MediaElement obj, Brush value) Parameters Type Name Description MediaElement obj The object. Brush value The value. SetOutlineBrush(MediaElement, Brush) Sets the outline brush. Declaration public static void SetOutlineBrush(MediaElement obj, Brush value) Parameters Type Name Description MediaElement obj The object. Brush value The value. SetOutlineWidth(MediaElement, Thickness) Sets the width of the outline. Declaration public static void SetOutlineWidth(MediaElement obj, Thickness value) Parameters Type Name Description MediaElement obj The object. Thickness value The value. SetText(MediaElement, String) Sets the text. Declaration public static void SetText(MediaElement obj, string value) Parameters Type Name Description MediaElement obj The object. System.String value The value. <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Platform.GuiContextType.html": {
    "href": "api/Unosquare.FFME.Platform.GuiContextType.html",
    "title": "Enum GuiContextType | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Enum GuiContextType Enumerates GUI Context Types Namespace : Unosquare.FFME.Platform Syntax public enum GuiContextType Fields Name Description None An invalid GUI context (console applications) WinForms A Windows Forms GUI Context WPF A WPF GUI context (i.e. has dispatcher and is not Windows Forms) <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.RenderingVideoEventArgs.html": {
    "href": "api/Unosquare.FFME.Events.RenderingVideoEventArgs.html",
    "title": "Class RenderingVideoEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class RenderingVideoEventArgs The video rendering event arguments Inheritance System.Object System.EventArgs RenderingEventArgs RenderingVideoEventArgs Inherited Members RenderingEventArgs.Stream RenderingEventArgs.Clock RenderingEventArgs.StartTime RenderingEventArgs.Duration System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.FFME.Events Syntax public sealed class RenderingVideoEventArgs : RenderingEventArgs Properties Bitmap Gets the writable bitmap filled with the video frame pixels. Feel free to capture or change this buffer. Declaration public BitmapDataBuffer Bitmap { get; } Property Value Type Description BitmapDataBuffer ClosedCaptions Gets the closed caption decoded packets. Declaration public ReadOnlyCollection<ClosedCaptionPacket> ClosedCaptions { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < ClosedCaptionPacket > PictureNumber Gets the display picture number (frame number). If not set by the decoder, this attempts to obtain it by dividing the start time by the frame duration Declaration public long PictureNumber { get; } Property Value Type Description System.Int64 SmtpeTimecode Gets the SMTPE time code. Declaration public string SmtpeTimecode { get; } Property Value Type Description System.String See Also System.EventArgs <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.RenderingEventArgs.html": {
    "href": "api/Unosquare.FFME.Events.RenderingEventArgs.html",
    "title": "Class RenderingEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class RenderingEventArgs A base class to represent media block rendering event arguments. Inheritance System.Object System.EventArgs RenderingEventArgs RenderingAudioEventArgs RenderingSubtitlesEventArgs RenderingVideoEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.FFME.Events Syntax public abstract class RenderingEventArgs : EventArgs Constructors RenderingEventArgs(StreamInfo, TimeSpan, TimeSpan, TimeSpan) Initializes a new instance of the RenderingEventArgs class. Declaration protected RenderingEventArgs(StreamInfo stream, TimeSpan startTime, TimeSpan duration, TimeSpan clock) Parameters Type Name Description StreamInfo stream The stream. System.TimeSpan startTime The position. System.TimeSpan duration The duration. System.TimeSpan clock The clock. Properties Clock Gets the clock position at which the media was called for rendering Declaration public TimeSpan Clock { get; } Property Value Type Description System.TimeSpan Duration Gets how long this media has to be presented. Declaration public TimeSpan Duration { get; } Property Value Type Description System.TimeSpan StartTime Gets the starting time at which this media has to be presented. Declaration public TimeSpan StartTime { get; } Property Value Type Description System.TimeSpan Stream Provides Stream Information coming from the media container. Declaration public StreamInfo Stream { get; } Property Value Type Description StreamInfo See Also System.EventArgs <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.PositionChangedRoutedEventArgs.html": {
    "href": "api/Unosquare.FFME.Events.PositionChangedRoutedEventArgs.html",
    "title": "Class PositionChangedRoutedEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class PositionChangedRoutedEventArgs Contains the position changed routed event args Inheritance System.Object PositionChangedRoutedEventArgs Namespace : Unosquare.FFME.Events Syntax public class PositionChangedRoutedEventArgs : RoutedEventArgs Constructors PositionChangedRoutedEventArgs(RoutedEvent, Object, TimeSpan, TimeSpan) Initializes a new instance of the PositionChangedRoutedEventArgs class. Declaration public PositionChangedRoutedEventArgs(RoutedEvent routedEvent, object source, TimeSpan oldPosition, TimeSpan newPosition) Parameters Type Name Description RoutedEvent routedEvent The routed event. System.Object source The source. System.TimeSpan oldPosition The old position. System.TimeSpan newPosition The new position. Properties OldPosition Gets the old position. Declaration public TimeSpan OldPosition { get; } Property Value Type Description System.TimeSpan Position Gets the current position. Declaration public TimeSpan Position { get; } Property Value Type Description System.TimeSpan <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.BitmapDataBuffer.html": {
    "href": "api/Unosquare.FFME.Events.BitmapDataBuffer.html",
    "title": "Class BitmapDataBuffer | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class BitmapDataBuffer Contains metadata about a raw bitmap back-buffer Inheritance System.Object BitmapDataBuffer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.FFME.Events Syntax public sealed class BitmapDataBuffer Properties BitsPerPixel Gets the bits per pixel. Declaration public int BitsPerPixel { get; } Property Value Type Description System.Int32 BufferLength Gets the length of the buffer (Stride x Pixel Height). Declaration public uint BufferLength { get; } Property Value Type Description System.UInt32 BytesPerPixel Gets the bytes per pixel. Declaration public int BytesPerPixel { get; } Property Value Type Description System.Int32 DpiX Gets the DPI on the X axis Declaration public double DpiX { get; } Property Value Type Description System.Double DpiY Gets the DPI on the Y axis Declaration public double DpiY { get; } Property Value Type Description System.Double Palette Gets the palette. Declaration public BitmapPalette Palette { get; } Property Value Type Description BitmapPalette PixelFormat Gets the pixel format. Declaration public PixelFormat PixelFormat { get; } Property Value Type Description PixelFormat PixelHeight Gets height of the bitmap Declaration public int PixelHeight { get; } Property Value Type Description System.Int32 PixelWidth Gets width of the bitmap Declaration public int PixelWidth { get; } Property Value Type Description System.Int32 Scan0 Gets a pointer to the raw pixel data Declaration public IntPtr Scan0 { get; } Property Value Type Description System.IntPtr Stride Gets the byte width of each row of pixels Declaration public int Stride { get; } Property Value Type Description System.Int32 UpdateRect Gets the update rect. Declaration public Int32Rect UpdateRect { get; } Property Value Type Description Int32Rect Methods CreateDrawingBitmap() Creates a Drawing Bitmap from this data buffer. Declaration public Drawing.Bitmap CreateDrawingBitmap() Returns Type Description System.Drawing.Bitmap The bitmap <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "README.html": {
    "href": "README.html",
    "title": "FFME: WPF MediaElement Alternative | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "FFME: WPF MediaElement Alternative ⭐ Please star this project if you like it and show your appreciation via PayPal.Me Announcements If you would like to support this project, you can show your appreciation via PayPal.Me Current Status: (2018-03-29) - Release 3.4.230 is now available, (see the Releases ) NuGet Package available here: https://www.nuget.org/packages/FFME.Windows/ FFmpeg Version: 3.4.2 (32-bit) Quick Usage Guide for WPF Apps Here is a quick guide on how to get started. Open Visual Studio (v2017 recommended), and create a new WPF Application. Target Framework must be 4.6.2 or above. (This will change to 4.6.1 in the final release) Install the NuGet Package from your Package Manager Console: PM> Install-Package FFME.Windows You need FFmpeg binaries now. Build your own or download a compatible build from Zeranoe FFmpeg Builds site . Your FFmpeg build should have a bin folder with 3 exe files and 8 dll files. Copy all 11 files to a folder such as c:\\ffmpeg Within you application's startup code ( Main method), set Unosquare.FFME.MediaElement.FFmpegDirectory = @\"c:\\ffmpeg\"; . Use the FFME MediaElement control as any other WPF control. For example: In your MainForm.xaml , add the namespace: xmlns:ffme=\"clr-namespace:Unosquare.FFME;assembly=ffme.win\" and then add the FFME control your window's XAML: <ffme:MediaElement x:Name=\"Media\" Background=\"Gray\" LoadedBehavior=\"Play\" UnloadedBehavior=\"Manual\" /> To play files or streams, simply set the Source property: Media.Source = new Uri(@\"c:\\your-file-here\"); Additional Usage Notes Remember: The Unosquare.FFME.Windows.Sample provides plenty of usage examples The generated API documentation is available here Features Overview FFME is a close (and I'd like to think better) drop-in replacement for Microsoft's WPF MediaElement Control . While the standard MediaElement uses DirectX (DirectShow) for media playback, FFME uses FFmpeg to read and decode audio and video. This means that for those of you who want to support stuff like HLS playback, or just don't want to go through the hassle of installing codecs on client machines, using FFME might just be the answer. FFME provides multiple improvements over the standard MediaElement such as: Fast media seeking and frame-by-frame seeking Properties such as Position, NaturalDuration, SpeedRatio, and Volume are all Dependency Properties! Additional and extended media events. Extracting (and modifying) video, audio and subtitle frames is very easy. Ability to easily apply FFmpeg video and audio filtergraphs. Ability to extract media metadata and tech specs of a media stream (title, album, bitrate, codecs, FPS, etc). Ability to apply volume, balance and speed ratio to media playback. MediaState actually works on this control. The standard WPF MediaElement severely lacks in this area. ... all in a single MediaElement control About how it works First off, let's review a few concepts. A packet is a group of bytes read from the input. All packets are of a specific MediaType (Audio, Video, Subtitle, Data), and contain some timing information and most importantly compressed data. Packets are sent to a Codec and in turn, the codec produces Frames . Please note that producing 1 frame does not always take exactly 1 packet . A packet may contain many frames but also a frame may require several packets for the decoder to build it. Frames will contain timing informattion and the raw, uncompressed data. Now, you may think you can use frames and show pixels on the screen or send samples to the sound card. We are close, but we still need to do some additional processing. Turns out different Codecs will produce different uncompressed data formats. For example, some video codecs will output pixel data in ARGB, some others in RGB, and some other in YUV420. Therefore, we will need to Convert these frames into something all hardware can use natively. I call these converted frames, MediaBlocks . These MediaBlocks will contain uncompressed data in standard Audio and Video formats that all hardware is able to receive. The process described above is implemented in 3 different layers: The MediaContainer wraps an input stream. This layer keeps track of a MediaComponentSet which is nothing more than a collecttion of MediaComponent objects. Each MediaComponent holds packet caching , frame decoding , and block conversion logic. It provides the following important functionality: We call Open to open the input stream and detect the different stream components. This also determines the codecs to use. We call Read to read the next available packet and store it in its corresponding component (audio, video, subtitle, data, etc) We call Decode to read the following packet from the queue that each of the components hold, and return a set of frames. Finally, we call Convert to turn a given frame into a MediaBlock . The MediaEngine wraps a MediaContainer and it is responsible for executing commands to control the input stream (Play, Pause, Stop, Seek, etc.) while keeping keeping 3 background workers. The PacketReadingWroker is designed to continuously read packets from the MediaContainer . It will read packets when it needs them and it will pause if it does not need them. This is determined by how much data is in the cache. It will try to keep approximately 1 second of media packets at all times. The FrameDecodingWroker gets the packets that the PacketReadingWorker writes and decodes them into frames. It then converts those frames into blocks and writes them to a MediaBlockBuffer . This block buffer can then be read by something else (the following worker described here) so its contents can be rendered. Finally, the BlockRenderingWorker reads blocks form the MediaBlockBuffer s and sends those blocks to a plat-from specific IMediaRenderer . At the highest level, we have a MediaElement . It wraps a MediaEngine and it contains platform-specific implementation of methods to perform stuff like audio rendering, video rendering, subtitle rendering, and property synchronization between the MediaEngine and itself. A high-level diagram is provided as additional reference below. Known Limitations Your help is welcome! I am planning the next version of this control, Floyd . See the Issues section. Working on Hardware acceleration. Maybe CUDA for highest compatibility. FFME supports opening capture devices. See examples below and issue #48 device://dshow/?audio=Microphone (Vengeance 2100) device://gdigrab?title=Command Prompt device://gdigrab?desktop Windows: Compiling, Running and Testing Please note that I am unable to distribute FFmpeg's binaries because I don't know if I am allowed to do so. Follow the instructions below to compile, run and test FFME. Clone this repository. Download the FFmpeg win32-shared binaries from Zeranoe FFmpeg Builds . Extract the contents of the zip file you just downloaded and go to the bin folder that got extracted. You should see 3 exe files and 8 dll files. Select and copy all of them. Now paste all 11 files from the prior step onto a well-known folder. Take note of the full path. (I used c:\\ffmpeg) Open the solution and set the Unosquare.FFME.Windows.Sample project as the startup project. You can do this by right clicking on the project and selecting Set as startup project Under the Unosquare.FFME.Windows.Sample project, locate the line public string FFmpegPath { get; set; } = @\"C:\\ffmpeg\\\"; and replace the path so that it points to the folder where you extracted your FFmpeg binaries (dll files). Click on Start to run the project. You should see a sample media player. Click on the Open icon located at the bottom right and enter a URL or path to a media file. The file or URL should play immediately, and all the properties should display to the right of the media display by clicking on the Info icon. You can use the resulting compiled assemblies in your project without further dependencies. Look for both ffme.common.dll and ffme.win.dll . Windows: Troubleshooting If you get the following error when compiling: The current .NET SDK does not support targeting .NET Standard 2.0. Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0. Simply download and install .NET Core SDK v2 or later. MacOS: Sample Player (in preview, WIP) Compile FFmpeg for Mac (instructions can be found on FFmpeg.AutoGen ) and copy the following libraries from /opt/local/lib 's to /Users/{USER}/ffmpeg (equivalent to ~/ffmpeg ): libavcodec.57.dylib libavdevice.57.dylib libavfilter.6.dylib libavformat.57.dylib libavutil.55.dylib libswresample.2.dylib libswscale.4.dylib Note: when building FFmpeg locally, compiled libraries are named differently than in the list above. E.g. libavcodec.57.dylib is actually named libavcodec.57.89.100.dylib . To properly load libraries, copy and rename each library to match the format in the list above. In the sample MacOS player, the FFmpeg folder is configured to point to ~/ffmpeg in the following line of code: Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), \"ffmpeg\"); Note that this can be customized to point to any other folder. When distributing the player and the associated libraries with your application, dll files should be added to the project as BundleResource items. Also, each library should be copied to the output directory on build. Afterwards, change the above configuration to use Environment.CurrentDirectory to search for FFmpeg libraries. MacOS: Troubleshooting Make sure you have Xamarin for Visual Studio 2017 installed if you want to open the MacOS projects. Thanks In no particular order To the FFmpeg team for making the Swiss Army Knife of media. I encourage you to donate to them. To Kyle Schwarz for creating and making Zeranoe FFmpeg builds available to everyone . To the NAudio team for making the best audio library out there for .NET -- one day I will contribute some improvements I have noticed they need. To Ruslan Balanukhin for his FFmpeg interop bindings generator tool: FFmpeg.AutoGen . To Martin Bohme for his tutorial on creating a video player with FFmpeg. To Barry Mieny for his beautiful FFmpeg logo Similar Projects Meta Vlc Microsoft FFmpeg Interop WPF-MediaKit LibVLC.NET Microsoft Player Framework License Please refer to the LICENSE file for more information."
  },
  "api/Unosquare.FFME.Platform.html": {
    "href": "api/Unosquare.FFME.Platform.html",
    "title": "Namespace Unosquare.FFME.Platform | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Namespace Unosquare.FFME.Platform Classes GuiContext Provides properties and methods for the WPF or Windows Forms GUI Threading context Enums GuiContextType Enumerates GUI Context Types <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.html": {
    "href": "api/Unosquare.FFME.Events.html",
    "title": "Namespace Unosquare.FFME.Events | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Namespace Unosquare.FFME.Events Classes BitmapDataBuffer Contains metadata about a raw bitmap back-buffer MediaInitializingRoutedEventArgs Represents the event arguments of the MediaInitializing routed event. MediaLogMessageEventArgs Contains the Message Logged Event Arguments MediaOpeningRoutedEventArgs Represents the event arguments of the MediaOpening routed event. MediaStateChangedRoutedEventArgs Contains the media state changed routed event args PositionChangedRoutedEventArgs Contains the position changed routed event args RenderingAudioEventArgs Provides the audio samples rendering payload as event arguments. RenderingEventArgs A base class to represent media block rendering event arguments. RenderingSubtitlesEventArgs Provides the subtitles rendering payload as event arguments. RenderingVideoEventArgs The video rendering event arguments <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.RenderingSubtitlesEventArgs.html": {
    "href": "api/Unosquare.FFME.Events.RenderingSubtitlesEventArgs.html",
    "title": "Class RenderingSubtitlesEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class RenderingSubtitlesEventArgs Provides the subtitles rendering payload as event arguments. Inheritance System.Object System.EventArgs RenderingEventArgs RenderingSubtitlesEventArgs Inherited Members RenderingEventArgs.Stream RenderingEventArgs.Clock RenderingEventArgs.StartTime RenderingEventArgs.Duration System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.FFME.Events Syntax public sealed class RenderingSubtitlesEventArgs : RenderingEventArgs Properties Cancel When set to true, clears the current subtitle and prevents the subtitle block from being rendered. Declaration public bool Cancel { get; set; } Property Value Type Description System.Boolean Format Gets the type of subtitle format the original subtitle text is in. Declaration public AVSubtitleType Format { get; } Property Value Type Description AVSubtitleType OriginalText Gets the text as originally decoded including all markup and formatting. Declaration public List<string> OriginalText { get; } Property Value Type Description System.Collections.Generic.List < System.String > Text Gets the text stripped out of ASS or SRT formatting. This is what the default subtitle renderer will display on the screen. Declaration public List<string> Text { get; } Property Value Type Description System.Collections.Generic.List < System.String > See Also System.EventArgs <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.RenderingAudioEventArgs.html": {
    "href": "api/Unosquare.FFME.Events.RenderingAudioEventArgs.html",
    "title": "Class RenderingAudioEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class RenderingAudioEventArgs Provides the audio samples rendering payload as event arguments. Inheritance System.Object System.EventArgs RenderingEventArgs RenderingAudioEventArgs Inherited Members RenderingEventArgs.Stream RenderingEventArgs.Clock RenderingEventArgs.StartTime RenderingEventArgs.Duration System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.FFME.Events Syntax public sealed class RenderingAudioEventArgs : RenderingEventArgs Properties BitsPerSample Gets the number of bits per sample. Declaration public int BitsPerSample { get; } Property Value Type Description System.Int32 Buffer Gets a pointer to the samples buffer. Samples are provided in PCM 16-bit signed, interleaved stereo. Declaration public IntPtr Buffer { get; } Property Value Type Description System.IntPtr BufferLength Gets the length in bytes of the samples buffer. Declaration public int BufferLength { get; } Property Value Type Description System.Int32 ChannelCount Gets the number of channels. Declaration public int ChannelCount { get; } Property Value Type Description System.Int32 SampleRate Gets the number of samples in 1 second. Declaration public int SampleRate { get; } Property Value Type Description System.Int32 Samples Gets the number of samples in the buffer for all channels. Declaration public int Samples { get; } Property Value Type Description System.Int32 SamplesPerChannel Gets the number of samples in the buffer per channel. Declaration public int SamplesPerChannel { get; } Property Value Type Description System.Int32 See Also System.EventArgs <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.MediaStateChangedRoutedEventArgs.html": {
    "href": "api/Unosquare.FFME.Events.MediaStateChangedRoutedEventArgs.html",
    "title": "Class MediaStateChangedRoutedEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class MediaStateChangedRoutedEventArgs Contains the media state changed routed event args Inheritance System.Object MediaStateChangedRoutedEventArgs Namespace : Unosquare.FFME.Events Syntax public class MediaStateChangedRoutedEventArgs : RoutedEventArgs Constructors MediaStateChangedRoutedEventArgs(RoutedEvent, Object, MediaState, MediaState) Initializes a new instance of the MediaStateChangedRoutedEventArgs class. Declaration public MediaStateChangedRoutedEventArgs(RoutedEvent routedEvent, object source, MediaState oldState, MediaState newState) Parameters Type Name Description RoutedEvent routedEvent The routed event. System.Object source The source. MediaState oldState State of the previous. MediaState newState The new state. Properties MediaState Gets the current media state. Declaration public MediaState MediaState { get; } Property Value Type Description MediaState OldMediaState Gets the position. Declaration public MediaState OldMediaState { get; } Property Value Type Description MediaState <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.MediaOpeningRoutedEventArgs.html": {
    "href": "api/Unosquare.FFME.Events.MediaOpeningRoutedEventArgs.html",
    "title": "Class MediaOpeningRoutedEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class MediaOpeningRoutedEventArgs Represents the event arguments of the MediaOpening routed event. Inheritance System.Object MediaOpeningRoutedEventArgs Namespace : Unosquare.FFME.Events Syntax public class MediaOpeningRoutedEventArgs : RoutedEventArgs Constructors MediaOpeningRoutedEventArgs(RoutedEvent, Object, MediaOptions, MediaInfo) Initializes a new instance of the MediaOpeningRoutedEventArgs class. Declaration public MediaOpeningRoutedEventArgs(RoutedEvent routedEvent, object source, MediaOptions options, MediaInfo info) Parameters Type Name Description RoutedEvent routedEvent The routed event. System.Object source The source. MediaOptions options The options. MediaInfo info The input information. Properties Info Provides internal details of the media, including its component streams. Typically, options are set based on what this information contains. Declaration public MediaInfo Info { get; } Property Value Type Description MediaInfo Options Set or change the options before the media is opened. Declaration public MediaOptions Options { get; } Property Value Type Description MediaOptions <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Events.MediaInitializingRoutedEventArgs.html": {
    "href": "api/Unosquare.FFME.Events.MediaInitializingRoutedEventArgs.html",
    "title": "Class MediaInitializingRoutedEventArgs | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class MediaInitializingRoutedEventArgs Represents the event arguments of the MediaInitializing routed event. Inheritance System.Object MediaInitializingRoutedEventArgs Namespace : Unosquare.FFME.Events Syntax public class MediaInitializingRoutedEventArgs : RoutedEventArgs Constructors MediaInitializingRoutedEventArgs(RoutedEvent, Object, StreamOptions, String) Initializes a new instance of the MediaInitializingRoutedEventArgs class. Declaration public MediaInitializingRoutedEventArgs(RoutedEvent routedEvent, object source, StreamOptions options, string url) Parameters Type Name Description RoutedEvent routedEvent The routed event. System.Object source The source. StreamOptions options The options. System.String url The URL. Properties Options Set or change the options before the media is opened. Declaration public StreamOptions Options { get; } Property Value Type Description StreamOptions Url Gets the URL. Declaration public string Url { get; } Property Value Type Description System.String <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.Platform.GuiContext.html": {
    "href": "api/Unosquare.FFME.Platform.GuiContext.html",
    "title": "Class GuiContext | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class GuiContext Provides properties and methods for the WPF or Windows Forms GUI Threading context Inheritance System.Object GuiContext Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Unosquare.FFME.Platform Syntax public sealed class GuiContext Properties Current Gets the current instance. Declaration public static GuiContext Current { get; } Property Value Type Description GuiContext IsInDebugMode Gets a value indicating whether a debugger was attached when the context initialized. Declaration public bool IsInDebugMode { get; } Property Value Type Description System.Boolean IsInDesignTime Gets a value indicating whetherthe context is in design time Declaration public bool IsInDesignTime { get; } Property Value Type Description System.Boolean Thread Gets the thread on which this context was created Declaration public Thread Thread { get; } Property Value Type Description System.Threading.Thread Type Gets the type of the context. Declaration public GuiContextType Type { get; } Property Value Type Description GuiContextType Methods EnqueueInvoke(DispatcherPriority, Action) Invokes a task on the GUI thread Declaration public Task EnqueueInvoke(DispatcherPriority priority, Action callback) Parameters Type Name Description DispatcherPriority priority The priority. System.Action callback The callback. Returns Type Description System.Threading.Tasks.Task The awaitable task EnqueueInvoke(Action) Invokes a task on the GUI thread Declaration public Task EnqueueInvoke(Action callback) Parameters Type Name Description System.Action callback The callback. Returns Type Description System.Threading.Tasks.Task The awaitable task InvokeAsync(DispatcherPriority, Action) Invokes a task on the GUI thread Declaration public Task InvokeAsync(DispatcherPriority priority, Action callback) Parameters Type Name Description DispatcherPriority priority The priority. System.Action callback The callback. Returns Type Description System.Threading.Tasks.Task The awaitable task InvokeAsync(DispatcherPriority, Delegate, Object[]) Invokes a task on the GUI thread Declaration public Task InvokeAsync(DispatcherPriority priority, Delegate callback, params object[] arguments) Parameters Type Name Description DispatcherPriority priority The priority. System.Delegate callback The callback. System.Object [] arguments The arguments. Returns Type Description System.Threading.Tasks.Task The awaitable task. InvokeAsync(Action) Invokes a task on the GUI thread Declaration public Task InvokeAsync(Action callback) Parameters Type Name Description System.Action callback The callback. Returns Type Description System.Threading.Tasks.Task The awaitable task <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.FFME.MediaElement.html": {
    "href": "api/Unosquare.FFME.MediaElement.html",
    "title": "Class MediaElement | FFME: WPF MediaElement replacement based on FFmpeg",
    "keywords": "Class MediaElement Represents a control that contains audio and/or video. In contrast with System.Windows.Controls.MediaElement, this version uses the FFmpeg library to perform reading and decoding of media streams. Inheritance System.Object MediaElement Implements System.IDisposable INotifyPropertyChanged IUriContext Namespace : Unosquare.FFME Syntax public sealed class MediaElement : UserControl, IDisposable, INotifyPropertyChanged, IUriContext Constructors MediaElement() Initializes a new instance of the MediaElement class. Declaration public MediaElement() Fields BalanceProperty The DependencyProperty for the MediaElement.Balance property. Declaration public static readonly DependencyProperty BalanceProperty Field Value Type Description DependencyProperty BufferingEndedEvent BufferingEnded is a routed event Declaration public static readonly RoutedEvent BufferingEndedEvent Field Value Type Description RoutedEvent BufferingStartedEvent BufferingStarted is a routed event Declaration public static readonly RoutedEvent BufferingStartedEvent Field Value Type Description RoutedEvent IsMutedProperty The DependencyProperty for the MediaElement.IsMuted property. Declaration public static readonly DependencyProperty IsMutedProperty Field Value Type Description DependencyProperty LoadedBehaviorProperty The DependencyProperty for the MediaElement.LoadedBehavior property. Declaration public static readonly DependencyProperty LoadedBehaviorProperty Field Value Type Description DependencyProperty MediaClosedEvent MediaClosed is a routed event. Declaration public static readonly RoutedEvent MediaClosedEvent Field Value Type Description RoutedEvent MediaEndedEvent MediaEnded is a routed event Declaration public static readonly RoutedEvent MediaEndedEvent Field Value Type Description RoutedEvent MediaFailedEvent MediaFailedEvent is a routed event. Declaration public static readonly RoutedEvent MediaFailedEvent Field Value Type Description RoutedEvent MediaInitializingEvent MediaOpeningEvent is a routed event. Declaration public static readonly RoutedEvent MediaInitializingEvent Field Value Type Description RoutedEvent MediaOpenedEvent MediaOpened is a routed event. Declaration public static readonly RoutedEvent MediaOpenedEvent Field Value Type Description RoutedEvent MediaOpeningEvent MediaOpeningEvent is a routed event. Declaration public static readonly RoutedEvent MediaOpeningEvent Field Value Type Description RoutedEvent MediaStateChangedEvent MediaStateChanged is a routed event Declaration public static readonly RoutedEvent MediaStateChangedEvent Field Value Type Description RoutedEvent PositionChangedEvent PositionChanged is a routed event Declaration public static readonly RoutedEvent PositionChangedEvent Field Value Type Description RoutedEvent PositionProperty The DependencyProperty for the MediaElement.Position property. Declaration public static readonly DependencyProperty PositionProperty Field Value Type Description DependencyProperty ScrubbingEnabledProperty The DependencyProperty for the MediaElement.ScrubbingEnabled property. Declaration public static readonly DependencyProperty ScrubbingEnabledProperty Field Value Type Description DependencyProperty SeekingEndedEvent SeekingEnded is a routed event Declaration public static readonly RoutedEvent SeekingEndedEvent Field Value Type Description RoutedEvent SeekingStartedEvent SeekingStarted is a routed event Declaration public static readonly RoutedEvent SeekingStartedEvent Field Value Type Description RoutedEvent SourceProperty DependencyProperty for FFmpegMediaElement Source property. Declaration public static readonly DependencyProperty SourceProperty Field Value Type Description DependencyProperty SpeedRatioProperty The DependencyProperty for the MediaElement.SpeedRatio property. Declaration public static readonly DependencyProperty SpeedRatioProperty Field Value Type Description DependencyProperty StretchDirectionProperty DependencyProperty for StretchDirection property. Declaration public static readonly DependencyProperty StretchDirectionProperty Field Value Type Description DependencyProperty StretchProperty DependencyProperty for Stretch property. Declaration public static readonly DependencyProperty StretchProperty Field Value Type Description DependencyProperty UnloadedBehaviorProperty The DependencyProperty for the MediaElement.UnloadedBehavior property. Declaration public static readonly DependencyProperty UnloadedBehaviorProperty Field Value Type Description DependencyProperty VolumeProperty The DependencyProperty for the MediaElement.Volume property. Declaration public static readonly DependencyProperty VolumeProperty Field Value Type Description DependencyProperty Properties AudioBitrate Gets the audio bitrate. Only valid after the MediaOpened event has fired. Declaration public ulong AudioBitrate { get; } Property Value Type Description System.UInt64 AudioBitsPerSample Gets the audio bits per sample. Only valid after the MediaOpened event has fired. Declaration public int AudioBitsPerSample { get; } Property Value Type Description System.Int32 AudioChannels Gets the audio channels count. Only valid after the MediaOpened event has fired. Declaration public int AudioChannels { get; } Property Value Type Description System.Int32 AudioCodec Gets the audio codec. Only valid after the MediaOpened event has fired. Declaration public string AudioCodec { get; } Property Value Type Description System.String AudioSampleRate Gets the audio sample rate. Only valid after the MediaOpened event has fired. Declaration public int AudioSampleRate { get; } Property Value Type Description System.Int32 Balance Gets/Sets the Balance property on the MediaElement. Declaration public double Balance { get; set; } Property Value Type Description System.Double BufferCacheLength The wait packet buffer length. It is adjusted to 1 second if bitrate information is available. Otherwise, it's simply 512KB Declaration public ulong BufferCacheLength { get; } Property Value Type Description System.UInt64 BufferingProgress Gets a value that indicates the percentage of buffering progress made. Range is from 0 to 1 Declaration public double BufferingProgress { get; } Property Value Type Description System.Double CanPause Returns whether the currently loaded media can be paused. This is only valid after the MediaOpened event has fired. Note that this property is computed based on wether the stream is detected to be a live stream. Declaration public bool CanPause { get; } Property Value Type Description System.Boolean DownloadCacheLength Gets the maximum packet buffer length, according to the bitrate (if available). If it's a realtime stream it will return 30 times the buffer cache length. Otherwise, it will return 4 times of the buffer cache length. Declaration public ulong DownloadCacheLength { get; } Property Value Type Description System.UInt64 DownloadProgress Gets a value that indicates the percentage of download progress made. Range is from 0 to 1 Declaration public double DownloadProgress { get; } Property Value Type Description System.Double FFmpegDirectory Gets or sets the FFmpeg path from which to load the FFmpeg binaries. You must set this path before setting the Source property for the first time on any instance of this control. Settng this property when FFmpeg binaries have been registered will throw an exception. Declaration public static string FFmpegDirectory { get; set; } Property Value Type Description System.String FFmpegLoadModeFlags Specifies the bitwise flags that correspond to FFmpeg library identifiers. Please use the class for valid combinations. If FFmpeg is already loaded, the value cannot be changed. Declaration public static int FFmpegLoadModeFlags { get; set; } Property Value Type Description System.Int32 FrameStepDuration Gets the duration of a single frame step. If there is a video component with a framerate, this propery returns the length of a frame. If there is no video component it simply returns a tenth of a second. Declaration public TimeSpan FrameStepDuration { get; } Property Value Type Description System.TimeSpan HasAudio Returns whether the given media has audio. Only valid after the MediaOpened event has fired. Declaration public bool HasAudio { get; } Property Value Type Description System.Boolean HasMediaEnded Gets a value indicating whether the media has reached its end. Declaration public bool HasMediaEnded { get; } Property Value Type Description System.Boolean HasSubtitles Returns whether the given media has subtitles. Only valid after the MediaOpened event has fired. Declaration public bool HasSubtitles { get; } Property Value Type Description System.Boolean HasVideo Returns whether the given media has video. Only valid after the MediaOpened event has fired. Declaration public bool HasVideo { get; } Property Value Type Description System.Boolean IsBuffering Get a value indicating whether the media is buffering. Declaration public bool IsBuffering { get; } Property Value Type Description System.Boolean IsLiveStream Returns whether the currently loaded media is live or realtime This is only valid after the MediaOpened event has fired. Declaration public bool IsLiveStream { get; } Property Value Type Description System.Boolean IsMuted Gets/Sets the IsMuted property on the MediaElement. Declaration public bool IsMuted { get; set; } Property Value Type Description System.Boolean IsNetowrkStream Returns whether the currently loaded media is a network stream. This is only valid after the MediaOpened event has fired. Declaration public bool IsNetowrkStream { get; } Property Value Type Description System.Boolean IsOpen Gets a value indicating whether this media element currently has an open media url. Declaration public bool IsOpen { get; } Property Value Type Description System.Boolean IsOpening Gets a value indicating whether the media is in the process of opening. Declaration public bool IsOpening { get; } Property Value Type Description System.Boolean IsPaused Gets a value indicating whether the media is playing. Declaration public bool IsPaused { get; } Property Value Type Description System.Boolean IsPlaying Gets a value indicating whether the media is playing. Declaration public bool IsPlaying { get; } Property Value Type Description System.Boolean IsSeekable Gets a value indicating whether the currently loaded media can be seeked. Declaration public bool IsSeekable { get; } Property Value Type Description System.Boolean IsSeeking Gets a value indicating whether the media seeking is in progress. Declaration public bool IsSeeking { get; } Property Value Type Description System.Boolean LoadedBehavior Specifies the action that the media element should execute when it is loaded. The default behavior is that it is under manual control (i.e. the caller should call methods such as Play in order to play the media). If a source is set, then the default behavior changes to to be playing the media. If a source is set and a loaded behavior is also set, then the loaded behavior takes control. Declaration public MediaState LoadedBehavior { get; set; } Property Value Type Description MediaState MediaFormat Gets the media format. Returns null when media has not been loaded. Declaration public string MediaFormat { get; } Property Value Type Description System.String MediaInfo Provides stream, chapter and program info of the underlying media. Returns null when no media is loaded. Declaration public MediaInfo MediaInfo { get; } Property Value Type Description MediaInfo MediaState Gets the current playback state. Declaration public MediaState MediaState { get; } Property Value Type Description MediaState Metadata Provides key-value pairs of the metadata contained in the media. Returns null when media has not been loaded. Declaration public ReadOnlyDictionary<string, string> Metadata { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyDictionary < System.String , System.String > NaturalDuration Gets the Media's natural duration Only valid after the MediaOpened event has fired. Declaration public Duration NaturalDuration { get; } Property Value Type Description Duration NaturalVideoHeight Returns the natural height of the media in the video. Only valid after the MediaOpened event has fired. Declaration public int NaturalVideoHeight { get; } Property Value Type Description System.Int32 NaturalVideoWidth Returns the natural width of the media in the video. Only valid after the MediaOpened event has fired. Declaration public int NaturalVideoWidth { get; } Property Value Type Description System.Int32 Position Gets/Sets the Position property on the MediaElement. Declaration public TimeSpan Position { get; set; } Property Value Type Description System.TimeSpan RemainingDuration Gets the remaining playback duration. Returns Forever for indeterminate values. Declaration public Duration RemainingDuration { get; } Property Value Type Description Duration ScrubbingEnabled Gets or sets a value that indicates whether the MediaElement will update frames for seek operations while paused. This is a dependency property. Declaration public bool ScrubbingEnabled { get; set; } Property Value Type Description System.Boolean Source Gets/Sets the Source on this MediaElement. The Source property is the Uri of the media to be played. Declaration public Uri Source { get; set; } Property Value Type Description Uri SpeedRatio Gets/Sets the SpeedRatio property on the MediaElement. Declaration public double SpeedRatio { get; set; } Property Value Type Description System.Double Stretch Gets/Sets the Stretch on this MediaElement. The Stretch property determines how large the MediaElement will be drawn. Declaration public Stretch Stretch { get; set; } Property Value Type Description Stretch StretchDirection Gets/Sets the stretch direction of the Viewbox, which determines the restrictions on scaling that are applied to the content inside the Viewbox. For instance, this property can be used to prevent the content from being smaller than its native size or larger than its native size. Declaration public StretchDirection StretchDirection { get; set; } Property Value Type Description StretchDirection UnloadedBehavior Specifies how the underlying media should behave when it has ended. The default behavior is to Pause the media. Declaration public MediaState UnloadedBehavior { get; set; } Property Value Type Description MediaState VideoBitrate Gets the video bitrate. Only valid after the MediaOpened event has fired. Declaration public ulong VideoBitrate { get; } Property Value Type Description System.UInt64 VideoCodec Gets the video codec. Only valid after the MediaOpened event has fired. Declaration public string VideoCodec { get; } Property Value Type Description System.String VideoFrameLength Gets the duration in seconds of the video frame. Only valid after the MediaOpened event has fired. Declaration public double VideoFrameLength { get; } Property Value Type Description System.Double VideoFrameRate Gets the video frame rate. Only valid after the MediaOpened event has fired. Declaration public double VideoFrameRate { get; } Property Value Type Description System.Double VideoHardwareDecoder Gets the name of the video hardware decoder in use. Enabling hardware acceleration does not guarantee decoding will be performed in hardware. When hardware decoding of frames is in use this will return the name of the HW accelerator. Otherwise it will return an empty string. Declaration public string VideoHardwareDecoder { get; } Property Value Type Description System.String VideoRotation Returns the clockwise angle that needs to be applied to the video for it to be displayed Only valid after the MediaOpened event has fired. Declaration public double VideoRotation { get; } Property Value Type Description System.Double VideoSmtpeTimecode Returns the current video SMTPE timecode if available. If not available, this property returns an empty string. Declaration public string VideoSmtpeTimecode { get; } Property Value Type Description System.String Volume Gets/Sets the Volume property on the MediaElement. Note: Valid values are from 0 to 1 Declaration public double Volume { get; set; } Property Value Type Description System.Double Methods Close() Closes the currently loaded media. Declaration public Task Close() Returns Type Description System.Threading.Tasks.Task The awaitable command Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Open(Uri) Opens the specified URI. This is an alternative method of opening media vs using the Source Dependency Property. Declaration public Task Open(Uri uri) Parameters Type Name Description Uri uri The URI. Returns Type Description System.Threading.Tasks.Task The awaitable task. Pause() Pauses playback of the currently loaded media. Declaration public Task Pause() Returns Type Description System.Threading.Tasks.Task The awaitable command Play() Begins or resumes playback of the currently loaded media. Declaration public Task Play() Returns Type Description System.Threading.Tasks.Task The awaitable command Stop() Pauses and rewinds the currently loaded media. Declaration public Task Stop() Returns Type Description System.Threading.Tasks.Task The awaitable command Events BufferingEnded Occurs when buffering of packets was Ended Declaration public event RoutedEventHandler BufferingEnded Event Type Type Description RoutedEventHandler BufferingStarted Occurs when buffering of packets was started Declaration public event RoutedEventHandler BufferingStarted Event Type Type Description RoutedEventHandler FFmpegMessageLogged Occurs when a logging message from the FFmpeg library has been received. This is shared across all instances of Media Elements Declaration public static event EventHandler<MediaLogMessageEventArgs> FFmpegMessageLogged Event Type Type Description System.EventHandler < MediaLogMessageEventArgs > MediaClosed Raised when the media is closed Declaration public event RoutedEventHandler MediaClosed Event Type Type Description RoutedEventHandler MediaEnded Raised when the corresponding media ends. Declaration public event RoutedEventHandler MediaEnded Event Type Type Description RoutedEventHandler MediaFailed Raised when the media fails to load or a fatal error has occurred which prevents playback. Declaration public event EventHandler<ExceptionRoutedEventArgs> MediaFailed Event Type Type Description System.EventHandler < ExceptionRoutedEventArgs > MediaInitializing Raised before the input stream of the media is initialized. Use this method to modify the input options. Declaration public event EventHandler<MediaInitializingRoutedEventArgs> MediaInitializing Event Type Type Description System.EventHandler < MediaInitializingRoutedEventArgs > MediaOpened Raised when the media is opened Declaration public event RoutedEventHandler MediaOpened Event Type Type Description RoutedEventHandler MediaOpening Raised before the input stream of the media is opened. Use this method to modify the media options. Declaration public event EventHandler<MediaOpeningRoutedEventArgs> MediaOpening Event Type Type Description System.EventHandler < MediaOpeningRoutedEventArgs > MediaStateChanged Occurs when media state is changed Declaration public event EventHandler<MediaStateChangedRoutedEventArgs> MediaStateChanged Event Type Type Description System.EventHandler < MediaStateChangedRoutedEventArgs > MessageLogged Occurs when a logging message has been logged. This does not include FFmpeg messages. Declaration public event EventHandler<MediaLogMessageEventArgs> MessageLogged Event Type Type Description System.EventHandler < MediaLogMessageEventArgs > PositionChanged Occurs when media position is changed Declaration public event EventHandler<PositionChangedRoutedEventArgs> PositionChanged Event Type Type Description System.EventHandler < PositionChangedRoutedEventArgs > PropertyChanged Multicast event for property change notifications. Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description PropertyChangedEventHandler RenderingAudio Occurs right before the audio is added to the audio buffer. You can update the bytes before they are enqueued. Ensure you handle this quickly before you get choppy audio. Declaration public event EventHandler<RenderingAudioEventArgs> RenderingAudio Event Type Type Description System.EventHandler < RenderingAudioEventArgs > RenderingSubtitles Occurs right before the subtitles are rendered. You can update the text. Ensure you handle this quickly before you get choppy subtitles. Declaration public event EventHandler<RenderingSubtitlesEventArgs> RenderingSubtitles Event Type Type Description System.EventHandler < RenderingSubtitlesEventArgs > RenderingVideo Occurs right before the video is presented on the screen. You can update the pizels on the bitmap before it is rendered on the screen. Or you could take a screenshot. Ensure you handle this very quickly as it runs on the UI thread. Declaration public event EventHandler<RenderingVideoEventArgs> RenderingVideo Event Type Type Description System.EventHandler < RenderingVideoEventArgs > SeekingEnded Occurs when Seeking of packets was Ended Declaration public event RoutedEventHandler SeekingEnded Event Type Type Description RoutedEventHandler SeekingStarted Occurs when Seeking of packets was started Declaration public event RoutedEventHandler SeekingStarted Event Type Type Description RoutedEventHandler Implements System.IDisposable INotifyPropertyChanged IUriContext See Also System.IDisposable <h3>Comments</h3> /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  }
}